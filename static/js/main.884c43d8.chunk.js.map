{"version":3,"sources":["components/Modal/modal.js","components/Game_environment/environment.js","shapes.js","components/header/header.js","App.js","index.js"],"names":["Modal","reset","keepGame","className","onClick","Environment","setresult","useState","modal","setModal","Winner","Player","select_count","matrix","Array","fill","map","cells","clickHandler","e","item","currentTarget","player","dataset","x","y","fillMatrix","userDraw","handelComputer","blockSkewRight","i","j","blockSkewLeft","blockUserRow","row","blockUserCol","col","blockCell","selectCell","condition","from","document","querySelectorAll","sumSkewLeft","sumSkewRight","sumRow","reduce","first","second","sumColumn","console","log","blockUser","find","parseInt","Math","floor","random","computerDraw","userValue","checkState","targetElement","innerHTML","svgElement","firstElementChild","classList","remove","userShape","setTimeout","style","strokeDashoffset","appendChild","children","forEach","element","sumX","sumY","sumSkewX","sumSkewY","NaN","result","checkWinner","sumx","sumy","sumSkewx","sumSkewy","cleanCells","cell","id","data-player","data-x","data-y","React","memo","Computer","computer","User","user","Equal","equal","App","results","setResults","key","ReactDOM","render","StrictMode","getElementById"],"mappings":"sUAwBeA,MArBf,YAAkC,IAAlBC,EAAiB,EAAjBA,MAAMC,EAAW,EAAXA,SASpB,OACE,6BACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,cACb,4BAAQC,QAXS,WACnBF,MAUE,YACA,4BAAQE,QARM,WAChBH,MAOE,kB,MC0RKI,MAtSf,YAA2C,IAApBC,EAAmB,EAAnBA,UAAUL,EAAS,EAATA,MAAS,EAChBM,oBAAS,GADO,mBAClCC,EADkC,KAC5BC,EAD4B,KAEpCC,GAAS,EACTC,EAAS,OAITC,EAAe,EACfC,EAASC,MAAM,GAAGC,KAAK,GAAGC,KAAI,kBAAMF,MAAM,GAAGC,KAAK,MAClDE,EAAQ,KAINC,EAAe,SAACC,GACpB,IAAIC,EAAOD,EAAEE,cACTC,EAASF,EAAKG,QAAQD,OACtBE,EAAIJ,EAAKG,QAAQC,EACjBC,EAAIL,EAAKG,QAAQE,EACN,KAAXH,IACFV,IACAQ,EAAKG,QAAQD,OAASX,EACtBe,EAAWF,EAAGC,EAjBP,GAkBPE,EAASP,GACTR,GAjBa,GAiBiBgB,MAgC5BC,EAAiB,WAGrB,IAFA,IAAIC,EAAI,EACJC,EAAI,EACFD,EAAI,GAAE,CACV,GAAoB,IAAjBjB,EAAOiB,GAAGC,GACX,MAAO,CAACP,EAAIM,EAAIL,EAAIM,GAEtBA,IACAD,MAIEE,EAAgB,WAEpB,IADA,IAAIF,EAAE,EACAA,EAAI,GAAE,CACV,GAAoB,IAAjBjB,EAAOiB,GAAGA,GACX,MAAQ,CAACN,EAAIM,EAAIL,EAAIK,GAEvBA,MAGEG,EAAe,SAACC,GACpB,IAAK,IAAIJ,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAuB,IAAnBjB,EAAOqB,GAAKJ,GACd,MAAO,CAAEN,EAAGU,EAAKT,EAAGK,GAGxB,MAAO,IAGHK,EAAe,SAACC,GACpB,IAAK,IAAIN,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAuB,IAAnBjB,EAAOiB,GAAGM,GACZ,MAAO,CAAEZ,EAAGM,EAAGL,EAAGW,GAGtB,MAAO,IAGHR,EAAiB,WACrB,IAEIS,EACAb,EACAC,EAJAa,EAAa,KACbC,GAAY,EAQhB,GAJAtB,EAAQH,MAAM0B,KAAKC,SAASC,iBAAiB,eAE7CL,EA3EgB,WAGhB,IAFA,IAAIM,EAAc,EACdC,EAAe,EACVd,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAI1B,IAHA,IAAIe,EAAShC,EAAOiB,GAAGgB,QAAO,SAACC,EAAOC,GAAR,OAAmBD,EAAQC,KACrDC,EAAY,EAERlB,EAAI,EAAGA,EAAI,EAAIA,IACrBkB,GAAapC,EAAOkB,GAAGD,GAMzB,GAHAc,EAAe/B,EAAO,GAAG,GAAKA,EAAO,GAAG,GAAKA,EAAO,GAAG,GACvD8B,GAAe9B,EAAOiB,GAAGA,GACzBoB,QAAQC,IAAIR,GACG,IAAXE,EACF,OAAOZ,EAAaH,GACf,GAAkB,IAAdmB,EACT,OAAOd,EAAaL,GAChB,GAAmB,IAAhBa,EACP,OAAOX,IACH,GAAoB,IAAjBY,EACP,OAAOf,IAGX,OAAO,EAmDKuB,GACZF,QAAQC,IAAId,GACRA,EACFC,EAAarB,EAAMoC,MAAK,SAACjC,GACvB,OACEkC,SAASlC,EAAKG,QAAQC,KAAOa,EAAUb,GACvC8B,SAASlC,EAAKG,QAAQE,KAAOY,EAAUZ,KAG3CD,EAAIa,EAAUb,EACdC,EAAIY,EAAUZ,MACT,CAEL,KAAOc,GACLD,EAFsBiB,KAAKC,MAAsB,EAAhBD,KAAKE,UAGtClB,EAAiD,KAArCtB,EAAMqB,GAAYf,QAAQD,QAExCgB,EAAarB,EAAMqB,IACRf,QAAQD,OAASX,EAC5Ba,EAAIc,EAAWf,QAAQC,EACvBC,EAAIa,EAAWf,QAAQE,EAGpBf,IACHE,IACAc,EAAWF,EAAGC,EA1HH,GA2HXiC,EAAapB,KAIXZ,EAAa,SAACF,EAAGC,EAAGkC,GACxB9C,EAAOW,GAAGC,GAAKkC,EACfC,EAAWpC,EAAGC,IAGVE,EAAW,SAACkC,GAChBA,EAAcC,UC/IC,qLDgJf,IAAMC,EAAaF,EAAcG,kBACjCD,EAAWE,UAAUC,OAAO,UAC5B,IAAIC,EAAYJ,EAAWC,kBAC3BI,YAAW,WACTD,EAAUE,MAAMC,iBAAmB,IAClC,KACHT,EAAcC,UAAY,GAC1BD,EAAcU,YAAYR,GAC1BpD,EAAS,YAGL+C,EAAe,SAACG,GACpBA,EAActC,QAAQD,OAASX,EAC/BkD,EAAcC,UCjJG,kRDkJjB,IAAMC,EAAaF,EAAcG,kBACjCD,EAAWE,UAAUC,OAAO,UAC5B,IAAIM,EAAWT,EAAWS,SAC1B1D,MAAM0B,KAAKgC,GAAUC,SAAQ,SAACC,GAC5BN,YAAW,WACTM,EAAQL,MAAMC,iBAAmB,IAChC,QAELT,EAAcC,UAAY,GAC1BD,EAAcU,YAAYR,GAC1BpD,EAAS,QAGLiD,EAAa,SAACpC,EAAGC,GAMrB,IALA,IAAIkD,EAAO,EACPC,EAAO,EACPC,EAAW,EACXC,EAAW,EAENhD,EAAI,EAAGA,EAAI,EAAGA,IACrB6C,GAAyB,IAAjB9D,EAAOW,GAAGM,GAAWjB,EAAOW,GAAGM,GAAKiD,IAC5CH,GAAyB,IAAjB/D,EAAOiB,GAAGL,GAAWZ,EAAOiB,GAAGL,GAAKsD,IAC5CF,GAA6B,IAAjBhE,EAAOiB,GAAGA,GAAWjB,EAAOiB,GAAGA,GAAKiD,IAChDD,GAAiC,IAArBjE,EAAOiB,GALb,EAKoBA,GAAWjB,EAAOiB,GALtC,EAK6CA,GAAKiD,IAE1D,GAAIF,GAAYC,GAAYH,GAAQC,EAAM,CACxC,IAAII,EAASC,EAAYN,EAAMC,EAAMC,EAAUC,GAChC,KAAXE,IACFtE,GAAS,EACT0D,YAAW,WACT9D,EAAU0E,GACVvE,GAAS,KACR,QAKHwE,EAAc,SAACC,EAAMC,EAAMC,EAAUC,GACzC,IAAIJ,EASJ,OARAA,EACW,IAATC,GAAuB,IAATC,GAA2B,IAAbE,GAA+B,IAAbD,EAC1C,OACS,IAATF,GAAuB,IAATC,GAA2B,IAAbE,GAA+B,IAAbD,EAC9C,WA9LS,IA+LTxE,EACA,QACA,GACCqE,GAIHK,EAAa,WACjBrE,EAAQwB,SAASC,iBAAiB,cAClC0B,YAAW,WAAO,IAAD,gBACEnD,GADF,IACf,2BAAwB,CAAC,IAAhBsE,EAAe,QACtBA,EAAKzB,UAAY,GACjByB,EAAKhE,QAAQD,OAAS,IAHT,8BAKfb,GAAS,KACR,KAUL,OACE,oCACE,yBAAKN,UAAU,iBAAiBqF,GAAG,aACjC,yBACEC,cAAY,GACZC,SAAO,IACPC,SAAO,IACPxF,UAAU,YACVC,QAASc,IAEX,yBACEuE,cAAY,GACZC,SAAO,IACPC,SAAO,IACPxF,UAAU,YACVC,QAASc,IAEX,yBACEuE,cAAY,GACZC,SAAO,IACPC,SAAO,IACPxF,UAAU,YACVC,QAASc,IAEX,yBACEuE,cAAY,GACZC,SAAO,IACPC,SAAO,IACPxF,UAAU,YACVC,QAASc,IAEX,yBACEuE,cAAY,GACZC,SAAO,IACPC,SAAO,IACPxF,UAAU,YACVC,QAASc,IAEX,yBACEuE,cAAY,GACZC,SAAO,IACPC,SAAO,IACPxF,UAAU,YACVC,QAASc,IAEX,yBACEuE,cAAY,GACZC,SAAO,IACPC,SAAO,IACPxF,UAAU,YACVC,QAASc,IAEX,yBACEuE,cAAY,GACZC,SAAO,IACPC,SAAO,IACPxF,UAAU,YACVC,QAASc,IAEX,yBACEuE,cAAY,GACZC,SAAO,IACPC,SAAO,IACPxF,UAAU,YACVC,QAASc,IAEXV,GAAU,kBAAC,EAAD,CAAOP,MAzEH,WAClBqF,IACA7E,GAAS,GACTR,KAsEyCC,SAAUoF,O,MEhRxCM,UAAMC,MAnBrB,YAA2B,IAAVb,EAAS,EAATA,OACTc,EAAWd,EAAOe,SAClBC,EAAOhB,EAAOiB,KACdC,EAAQlB,EAAOmB,MACnB,OACI,yBAAKhG,UAAU,eACX,4CACA,yBAAKA,UAAU,WACX,uCACA,oCACA,mCACA,2BAAI2F,GACJ,2BAAII,GACJ,2BAAIF,QCcLI,MAzBf,WAAgB,IAAD,EAEgB7F,mBAAS,CAAC0F,KAAO,EAAIF,SAAW,EAAII,MAAQ,IAF5D,mBAENE,EAFM,KAEEC,EAFF,KAYb,OACE,yBAAKnG,UAAU,aACb,gCACE,gDACA,kBAAC,EAAD,CAAQ6E,OAAUqB,KAEpB,8BACE,kBAAC,EAAD,CAAapG,MAVD,WAChBqG,EAAW,CAACL,KAAO,EAAIF,SAAW,EAAII,MAAQ,KASX7F,UAfnB,SAACiG,GACjBF,EAAQE,KACRD,EAAW,eAAID,UCLnBG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjE,SAASkE,eAAe,W","file":"static/js/main.884c43d8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./modal.css\";\n\nfunction Modal({reset,keepGame}) {\n\n    const continueHandle = () => {\n        keepGame();\n    }\n\n    const resetHandle = () => {\n        reset()\n    }\n  return (\n    <div>\n      <div className=\"finishBanner\">\n        <div className=\"messageBox\">\n          <button onClick={continueHandle}>Continue</button>\n          <button onClick={resetHandle}>Reset Game</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Modal;\n","import React, {useState} from \"react\";\nimport { Circle, Multiply } from \"../../shapes\";\nimport Modal from \"../Modal/modal\";\nimport \"./environment.css\";\n\nfunction Environment({ setresult,reset }) {\n  const[modal,setModal] = useState(false)\n  let Winner = false;\n  let Player = \"user\";\n  let user = 1;\n  let computer = 3;\n  let MAX_SELECT = 9;\n  let select_count = 0;\n  let matrix = Array(3).fill(0).map(() => Array(3).fill(0));\n  let cells = null;\n  let userSvg = Circle;\n  let computerSvg = Multiply;\n\n  const clickHandler = (e) => {\n    let item = e.currentTarget;\n    let player = item.dataset.player;\n    let x = item.dataset.x;\n    let y = item.dataset.y;\n    if (player === \"\") {\n      select_count++;\n      item.dataset.player = Player;\n      fillMatrix(x, y, user);\n      userDraw(item);\n      select_count >= MAX_SELECT || handelComputer();\n    }\n  };\n\n  const blockUser = () => {\n    let sumSkewLeft = 0;\n    let sumSkewRight = 0;\n    for (let i = 0; i < 3; i++) {\n      let sumRow = matrix[i].reduce((first, second) => first + second);\n      let sumColumn = 0;\n      \n      for(let j = 0; j < 3 ; j++){\n        sumColumn += matrix[j][i];\n      }\n\n      sumSkewRight = matrix[0][2] + matrix[1][1] + matrix[2][0]\n      sumSkewLeft += matrix[i][i];\n      console.log(sumSkewLeft)\n      if (sumRow === 2) {\n        return blockUserRow(i);\n      } else if (sumColumn === 2) {\n        return blockUserCol(i);\n      }else if(sumSkewLeft === 2){\n        return blockSkewLeft();\n      }else if(sumSkewRight === 2){\n        return blockSkewRight();\n      }\n    }\n    return false;\n  };\n\n\n  const blockSkewRight = () => {\n    let i = 0;\n    let j = 2;\n    while(i < 3){\n      if(matrix[i][j] === 0){\n        return {x : i , y : j}\n      }\n      j--;\n      i++\n    }\n  }\n\n  const blockSkewLeft = () => {\n    let i=0;\n    while(i < 3){\n      if(matrix[i][i] === 0 ){\n        return ({x : i , y : i}) \n      }\n      i++;\n    }\n  }\n  const blockUserRow = (row) => {\n    for (let i = 0; i < 3; i++) {\n      if (matrix[row][i] === 0) {\n        return { x: row, y: i };\n      }\n    }\n    return \"\";\n  };\n\n  const blockUserCol = (col) => {\n    for (let i = 0; i < 3; i++) {\n      if (matrix[i][col] === 0) {\n        return { x: i, y: col };\n      }\n    }\n    return \"\";\n  };\n\n  const handelComputer = () => {\n    let selectCell = null;\n    let condition = true;\n    let blockCell;\n    let x;\n    let y;\n    cells = Array.from(document.querySelectorAll(\".grid-item\"));\n\n    blockCell = blockUser();\n    console.log(blockCell);\n    if (blockCell) {\n      selectCell = cells.find((item) => {\n        return (\n          parseInt(item.dataset.x) === blockCell.x &&\n          parseInt(item.dataset.y) === blockCell.y\n        );\n      });\n      x = blockCell.x;\n      y = blockCell.y;\n    } else {\n      let randomIndex = () => Math.floor(Math.random() * 9);\n      while (condition) {\n        selectCell = randomIndex();\n        condition = cells[selectCell].dataset.player === \"\" ? false : true;\n      }\n      selectCell = cells[selectCell];\n      selectCell.dataset.player = Player;\n      x = selectCell.dataset.x;\n      y = selectCell.dataset.y;\n    }\n\n    if (!Winner) {\n      select_count++;\n      fillMatrix(x, y, computer);\n      computerDraw(selectCell);\n    }\n  };\n\n  const fillMatrix = (x, y, userValue) => {\n    matrix[x][y] = userValue;\n    checkState(x, y);\n  };\n\n  const userDraw = (targetElement) => {\n    targetElement.innerHTML = userSvg;\n    const svgElement = targetElement.firstElementChild;\n    svgElement.classList.remove(\"d-none\");\n    let userShape = svgElement.firstElementChild;\n    setTimeout(() => {\n      userShape.style.strokeDashoffset = 0;\n    }, 100);\n    targetElement.innerHTML = \"\";\n    targetElement.appendChild(svgElement);\n    Player = \"computer\";\n  };\n\n  const computerDraw = (targetElement) => {\n    targetElement.dataset.player = Player;\n    targetElement.innerHTML = computerSvg;\n    const svgElement = targetElement.firstElementChild;\n    svgElement.classList.remove(\"d-none\");\n    let children = svgElement.children;\n    Array.from(children).forEach((element) => {\n      setTimeout(() => {\n        element.style.strokeDashoffset = 0;\n      }, 1000);\n    });\n    targetElement.innerHTML = \"\";\n    targetElement.appendChild(svgElement);\n    Player = \"user\";\n  };\n\n  const checkState = (x, y) => {\n    let sumX = 0;\n    let sumY = 0;\n    let sumSkewX = 0;\n    let sumSkewY = 0;\n    let j = 2;\n    for (let i = 0; i < 3; i++) {\n      sumX += matrix[x][i] !== 0 ? matrix[x][i] : NaN;\n      sumY += matrix[i][y] !== 0 ? matrix[i][y] : NaN;\n      sumSkewX += matrix[i][i] !== 0 ? matrix[i][i] : NaN;\n      sumSkewY += matrix[i][j - i] !== 0 ? matrix[i][j - i] : NaN;\n    }\n    if (sumSkewX || sumSkewY || sumX || sumY) {\n      let result = checkWinner(sumX, sumY, sumSkewX, sumSkewY);\n      if (result !== \"\") {\n        Winner = true;\n        setTimeout(() => {\n          setresult(result);\n          setModal(true)\n        }, 1000);\n      }\n    }\n  };\n\n  const checkWinner = (sumx, sumy, sumSkewx, sumSkewy) => {\n    let checkWinner;\n    checkWinner =\n      sumx === 3 || sumy === 3 || sumSkewy === 3 || sumSkewx === 3\n        ? \"user\"\n        : sumx === 9 || sumy === 9 || sumSkewy === 9 || sumSkewx === 9\n        ? \"computer\"\n        : select_count === MAX_SELECT\n        ? \"equal\"\n        : \"\";\n    return checkWinner;\n  };\n\n\n  const cleanCells = () => {\n    cells = document.querySelectorAll(\".grid-item\");\n    setTimeout(() => {\n      for (let cell of cells) {\n        cell.innerHTML = \"\";\n        cell.dataset.player = \"\";\n      }\n      setModal(false)\n    }, 10);\n  };\n\n  const restartGame = () => {\n    cleanCells()\n    setModal(false);\n    reset()\n  }\n\n\n  return (\n    <>\n      <div className=\"grid-container\" id=\"container\">\n        <div\n          data-player=\"\"\n          data-x=\"0\"\n          data-y=\"0\"\n          className=\"grid-item\"\n          onClick={clickHandler}\n        ></div>\n        <div\n          data-player=\"\"\n          data-x=\"0\"\n          data-y=\"1\"\n          className=\"grid-item\"\n          onClick={clickHandler}\n        ></div>\n        <div\n          data-player=\"\"\n          data-x=\"0\"\n          data-y=\"2\"\n          className=\"grid-item\"\n          onClick={clickHandler}\n        ></div>\n        <div\n          data-player=\"\"\n          data-x=\"1\"\n          data-y=\"0\"\n          className=\"grid-item\"\n          onClick={clickHandler}\n        ></div>\n        <div\n          data-player=\"\"\n          data-x=\"1\"\n          data-y=\"1\"\n          className=\"grid-item\"\n          onClick={clickHandler}\n        ></div>\n        <div\n          data-player=\"\"\n          data-x=\"1\"\n          data-y=\"2\"\n          className=\"grid-item\"\n          onClick={clickHandler}\n        ></div>\n        <div\n          data-player=\"\"\n          data-x=\"2\"\n          data-y=\"0\"\n          className=\"grid-item\"\n          onClick={clickHandler}\n        ></div>\n        <div\n          data-player=\"\"\n          data-x=\"2\"\n          data-y=\"1\"\n          className=\"grid-item\"\n          onClick={clickHandler}\n        ></div>\n        <div\n          data-player=\"\"\n          data-x=\"2\"\n          data-y=\"2\"\n          className=\"grid-item\"\n          onClick={clickHandler}\n        ></div>\n       {modal &&  <Modal reset={restartGame} keepGame={cleanCells} />}\n      </div>\n    </>\n  );\n}\n\nexport default Environment;\n","export const Circle = `<svg class=\"d-none\" height=\"100\" width=\"100\">\n<circle\n  class=\"circle\"\n  cx=\"46\"\n  cy=\"50\"\n  r=\"20\"\n  fill=\"none\"\n  stroke=\"cornflowerblue\"\n  stroke-width=\"3\"\n/>\n</svg>`;\n\nexport const Multiply = `<svg class=\"d-none\" height=\"100\" width=\"100\" role=\"img\">\n<path\n  class=\"circle\"\n  id=\"lineAB\"\n  d=\"M 28 70 l 30 -40\"\n  stroke=\"red\"\n  stroke-width=\"3\"\n/>\n<path\n  class=\"circle\"\n  id=\"lineBC\"\n  d=\"M 28 30 l 30 40\"\n  stroke=\"red\"\n  stroke-width=\"3\"\n/>\n</svg>`;\n","import React from 'react'\nimport './header.css'\nfunction Header({result}) {\n    let Computer = result.computer;\n    let User = result.user;\n    let Equal = result.equal;\n    return (\n        <div className='results-box'>\n            <h4>RESULT TABLE</h4>\n            <div className='results'>\n                <p>computer</p>\n                <p>equal</p>\n                <p>user</p>\n                <p>{Computer}</p>\n                <p>{Equal}</p>\n                <p>{User}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default React.memo(Header);\n","import React, {useState } from \"react\";\nimport \"./App.css\";\nimport Environment from \"./components/Game_environment/environment\";\nimport Header from \"./components/header/header\";\nfunction App() {\n\n  const [results,setResults] = useState({user : 0 , computer : 0 , equal : 0});\n  \n  const setResult = (key) => {\n    results[key]++\n    setResults({...results});\n  };\n\n  const resetGame = () => {\n    setResults({user : 0 , computer : 0 , equal : 0})\n  }\n  return (\n    <div className=\"Container\">\n      <header>\n        <h1>Tic Tac Toe Game</h1>\n        <Header result = {results} />\n      </header>\n      <main>\n        <Environment reset={resetGame} setresult={setResult} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}